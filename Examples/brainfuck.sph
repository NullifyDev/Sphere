 #> Explanations:
 #   - "currchar: string @ @input" just means: string variable named "currchar" at the location of variable named "input"
 #   - "| len = 1" just sets a property of len (length) to 1 where "|" tells the compiler that a property is being set 
 #     it is differenciated betewen Bitwise Or and Property Definition/Assignment based on its Left-Hand-Side type check (wether LHS is an Identifier or not)
 #             
 # 
 # Fun Fact: Sphere was first conceptualized as a language named "Hellmo" - A language inspired by Brainfuck and Assembly. 
 #           The language was going to be written purely from hex numbers which then later on became Sphere.
 #           Hellmo: https://github.com/NullifyDev/Hellmo 
<#

# COMPILATION CONDITION GUARD(S)
# Tells the compiler "if Sphere is earlier than v1.1, return (do not run)"
Sphere { 
    if Sphere.Version > 1.1: skip 
}

main(args) { # function with wildcard varible (morphs into what gets assigned to it)
    inpterp("++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.")
}

tape: string
i, loop: int | unsigned

interp(input: string) {
    currchar: string @ @input | len = 1     # sets currchar to the address of input (first/0th index)

    while i < input.len {
        currchar = input[i]              # sets value of currchar to the value of input, indexed by the value of i
        switch currchar {
            '>' => mov ptr 1
            '<' => mov ptr -1
            '+' => incr ptr
            '-' => decr ptr
            '.' => out ptr
            ',' => ptr = in
            '[' {
                if ptr == 0 {  
                    loop = 1
                    while loop > 0 {
                        incr i
                        currchar = input[i]
                          if currchar == '[': incr loop
                        elif currchar == ']': decr loop
                    }  
                }
            }
            ']' {
                if ptr {                   # check if value of ptr is not null
                    loop = 1
                    while loop > 0 {
                        decr i
                        currchar = input[i]
                          if currchar == '[': decr loop
                        elif currchar == ']': incr loop
                    }
                }  
            }
        }
        incr i
    }
}
